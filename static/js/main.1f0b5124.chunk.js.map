{"version":3,"sources":["components/LayoutRouteHandler/LayoutRouteHandler.js","layout/DefaultLayout/components/ProfileHeader/ProfileHeader.js","layout/DefaultLayout/components/ProfileBody/ProfileBody.js","layout/DefaultLayout/components/ProfileFooter/ProfileFooter.js","layout/DefaultLayout/DefaultLayout.js","views/Home/Home.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["LayoutRouteHandler","props","Layout","layout","Component","component","rest","render","matchProps","ProfileHeader","className","ProfileBody","ProfileFooter","DefaultLayout","Home","Routes","commponent","HomeView","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAkBeA,EAfY,SAAAC,GAAU,IACpBC,EAA0CD,EAAlDE,OAA2BC,EAAuBH,EAAlCI,UAAyBC,EADd,YACuBL,EADvB,wBAGnC,OACC,kBAAC,IAAD,iBACKK,EADL,CAECC,OAAQ,SAAAC,GAAU,OACjB,kBAACN,EAAD,KACC,kBAACE,EAAcI,SCDLC,EARO,SAAAR,GACrB,OACC,yBAAKS,UAAU,oBACd,wCCKYC,EARK,SAAAV,GACnB,OACC,yBAAKS,UAAU,kBACd,qCCKYE,EARO,SAAAX,GACrB,OACC,yBAAKS,UAAU,oBACd,2CCaYG,EAVO,SAAAZ,GACrB,OACC,yBAAKS,UAAU,aACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLYI,EANF,SAAAb,GACZ,OACC,qCCiBac,EAbA,WACd,OACC,kBAAC,IAAD,KAEC,kBAAC,EAAD,CACCC,WAAYC,EACZd,OAAQU,EACRK,OAAK,EACLC,KAAK,QCAMC,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASnB,OACP,kBAAC,IAAMoB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f0b5124.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nconst LayoutRouteHandler = props => {\r\n\tconst { layout: Layout, component: Component, ...rest } = props;\r\n\r\n\treturn (\r\n\t\t<Route\r\n\t\t\t{...rest}\r\n\t\t\trender={matchProps => (\r\n\t\t\t\t<Layout>\r\n\t\t\t\t\t<Component {...matchProps} />\r\n\t\t\t\t</Layout>\r\n\t\t\t)}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default LayoutRouteHandler;\r\n","import React from 'react';\r\n\r\nconst ProfileHeader = props => {\r\n\treturn (\r\n\t\t<div className=\"header-container\">\r\n\t\t\t<h5>Header</h5>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ProfileHeader;","import React from 'react';\r\n\r\nconst ProfileBody = props => {\r\n\treturn (\r\n\t\t<div className=\"body-container\">\r\n\t\t\t<p>Body</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ProfileBody;","import React from 'react';\r\n\r\nconst ProfileFooter = props => {\r\n\treturn (\r\n\t\t<div className=\"footer-container\">\r\n\t\t\t<small>Footer</small>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ProfileFooter;","import React from 'react';\r\n\r\nimport {\r\n\tProfileHeader,\r\n\tProfileBody,\r\n\tProfileFooter\r\n} from './components';\r\n\r\nconst DefaultLayout = props => {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<ProfileHeader />\r\n\t\t\t<ProfileBody />\r\n\t\t\t<ProfileFooter />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default DefaultLayout;","import React from 'react';\r\n\r\nconst Home = props => {\r\n\treturn (\r\n\t\t<h1>Home</h1>\r\n\t);\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Switch, Redirect } from 'react-router-dom';\r\n\r\nimport { LayoutRouteHandler } from './components';\r\nimport { DefaultLayout } from './layout';\r\n\r\nimport { Home as HomeView } from './views';\r\n\r\nconst Routes = () => {\r\n\treturn (\r\n\t\t<Switch>\r\n\t\t\t{/*<Redirect exact from=\"profile/\" to=\"profile/home\" />*/}\r\n\t\t\t<LayoutRouteHandler\r\n\t\t\t\tcommponent={HomeView}\r\n\t\t\t\tlayout={DefaultLayout}\r\n\t\t\t\texact\r\n\t\t\t\tpath=\"/\" />\r\n\t\t</Switch>\r\n\t);\r\n};\r\n\r\nexport default Routes;","import React from 'react';\r\n\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nimport Routes from './Routes';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Routes />\r\n    </Router>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}